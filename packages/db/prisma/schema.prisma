// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Posts {
  id              String   @id @default(uuid())
  post_link       String
  caption         String
  slides          String[]
  post_created_at DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@index([id, post_link])
}

model Otp {
  id        String   @id @default(cuid())
  email     String
  otp       String
  order_id  String   @default("")
  bundle_id String   @default("")
  expires   DateTime
}

model Users {
  id                 String    @id @default(uuid()) /// @zod.uuid()
  name               String?
  email              String    @unique
  house_number       String?
  pincode            String? /// @zod.max(6).min(6)
  landmark           String?
  locality           String?
  instagram_username String?
  city               String?
  role               USER_ROLE @default(USER)
  state              String?
  country            String?
  phone_no           String? /// @zod.max(10).min(10)
  orders             Orders[]
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  Bundles            Bundles[]
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]

  @@index([id])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bundles {
  id                 String   @id @default(uuid())
  bundle_size        String
  aesthetics         String
  other_aesthetics   String?
  fashion_dislikes   String?
  link_input         String
  bundle_description String
  top_size           String
  waist              String
  length             String
  status             Status   @default(PENDING)
  user_id            String?
  user               Users?   @relation(fields: [user_id], references: [id])
  images             String[]
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  Orders             Orders?
}

model Orders {
  id                  String   @id @default(uuid()) /// @zod.uuid()
  instagram_post_urls String[]
  user                Users?   @relation(fields: [user_id], references: [id])
  user_id             String?
  price               Int      @default(0)
  status              Status   @default(PENDING)
  prebook             Boolean  @default(false)
  courier             COURIER  @default(DEFAULT)
  images              String[]
  awb                 String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  length              String?  @default("0")
  breadth             String?  @default("0")
  height              String?  @default("0")
  weight              String?  @default("0")
  shipping_cost       Float?   @default(0.0)
  pickup_id           String?
  pickup              Pickups? @relation(fields: [pickup_id], references: [id])
  bundle_id           String?  @unique
  bundles             Bundles? @relation(fields: [bundle_id], references: [id])

  @@index([user_id, id])
}

model Pickups {
  id              String   @id @default(uuid())
  pickup_id       Int      @unique
  pickup_location String
  pickup_date     String
  Orders          Orders[]
  created_at      DateTime @default(now())

  @@index([id, pickup_date])
}

enum Size {
  SMALL
  MEDIUM
  LARGE
}

enum USER_ROLE {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Status {
  PENDING
  ACCEPTED
  SHIPPED
  DELIVERED
  CANCELLED
  MANIFESTED
  OUT_FOR_DELIVERY
  HOLD
  RTO
}

enum COURIER {
  DEFAULT
  INDIA_POST
  ECOM_EXPRESS
  XPRESSBEES
  DELHIVERY
  DTDC
  OTHER
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}
